简介：
在实时游戏中，会经常遇到敌人追逐玩家的情况。由于地形的限制和玩家位置不断地变化，敌人追逐玩家的路线可能会随时变化，这时需要实时的计算敌人的行动路线。。在增加了可以破坏的障碍物之后，寻找通路的过程变得更加复杂。这时一种足够快的、能够动态决定敌人追踪玩家路线的算法的需求随之而生。
地形的表示方法：
在这篇论文中，地形的表示方法采用的是网格表示方法，将整个地图分割成正方形的网格，无论的敌人的移动还是玩家的移动，都是以网格为单位的。根据网格这种表示方法，也可以进行一些细节上的优化（将大片的相同地形的点结合为一个节点加快路径计算速度）
主要算法介绍：
A*算法是一种经常应用在静态寻路中的寻路算法。该算法结合了Dijkstra算法的优点（倾向于距离起点最近的节点）和贪心最好优先算法的优点（倾向于选择距离终点最近的节点）。虽然能够得到比较好的效果，但是也存在着寻路结果不真实的问题（例如寻路结果可能会贴着障碍物的边缘）
Potential Field算法是近年来兴起的动态寻路算法。为了给机器人寻找避开障碍的实时算法，在1985年，Ossama Khatib引入了Potential Field算法。Potential Field 算法的基本思想是通过对整张地图的地形处理，得到每一个网格的潜在值。根据这些节点的潜在值，寻路主体能够选择最小潜在值的节点作为下一步要走的节点。
本篇论文的主要目的是将以上两种算法结合起来，在距离目标节点比较近的时候，选择A*算法作为寻路方法，而距离目的地较远的时候，能够“自动”选择接近目标的路径，从而使用Potential Field算法作为寻路方法
A*算法的实现简介：

Potential Field算法的实现简介：
在Potential Field算法中，寻路主题比较周围节点的潜在值，选择潜在值最小的节点作为下一步要走的位置。

地形：在地图中，地形主要分为三种：
1.不可通过的地形：这种节点不能通过，在寻路时必须要避开这些节点
2.通过时会减速的地形：这种地形可以通过，但是要花费更高的代价，在游戏中的体现可以是会花费更高的代价或者会花费更多的时间。
3.平地：这种地形可以通过，代价也是最小的。

地形对于潜在值的影响：在A*算法中，可能会出现寻路结果贴着障碍物的不拟人化的情况。在Potential Field中，可以通过对障碍物及其周边的节点设置较高的潜在值，使寻路主题在选择下一步的位置是，避开靠近障碍物的路径。障碍物对周边节点的潜在值的影响与障碍物和该节点之间的距离有关。假设两个节点的坐标为(x1,y1),(x2,y2),那么两个节点之间的距离用abs(x1-x2)+abs(y1-y2)表示。一个障碍物有最大的影响半径。一个障碍物节点对于周边节点的影响范围是菱形的。（下面插潜在值影响范围和潜在之随着距离增加的变化曲线（开口向下的抛物线））

地形方面的最终潜在值选择：
一个节点的潜在值可能处在多个障碍物的潜在值影响范围之中。这时需要对该节点的最终潜在值进行判断。在这里，我采用该节点在所有的潜在值中最大的那一个。一个非常明显的理由就是为了避开里的最近的那个障碍物，所以要用最大的潜在值作为该节点的潜在值

目标节点对于潜在值的影响：
目标节点对于寻路主体应该有吸引作用，让寻路主体能够“自主”的靠近目标节点。所以，在目标节点的周围产生一个足以覆盖整个寻路区域的作用范围（这里作用范围半径采用的是min(width,height)），潜在值为负数。距离目标节点越近，潜在值绝对值越大。（下面插图，形式同地形对于潜在值得影响）

对于已经经过的节点的处理：
由于寻路主体的下一格位置完全由潜在值决定，所以有可能出现寻路主体周围特定的潜在值而在原地绕圈的现象。在这里参照蚂蚁算法（蚂蚁会在经过的道路上留下激素，在这里主要使用其防止不断绕圈的特性），在曾经经过的节点上，在最终潜在值上添加一个比较小的潜在值。这样能够让寻路主题更倾向于走没有走过的节点，而又不至于让已经走过的节点把寻路主题的道路封死。

对于最终潜在值的计算：
最终潜在值的结果来源于以下三个部分
1.地形方面的最终潜在值（潜在值为正）
2.目标节点对该节点潜在值（潜在值为负）
3.寻路主体已经过的路径对于潜在值的加成（潜在值为正）
三者之和即为该节点最终的潜在值，作为寻路主体下一步的依据。

A*算法与Potential Field算法的结合
A*算法的优势在于能够找到一个精确的路径到达最终节点，但是其中的启发函数在距离比较远的时候很难找到一个可靠的启发函数。Potential Field算法的优势在于能够让寻路主体“自动”的接近目标节点，并且能够表现出比较自然的路径。但是在距离节点较近的时候可能会因为障碍物较多而绕远。于是结合两种算法的优势，在距离目标节点较远的时候,使用 Potential Field 算法，使运动轨迹更自然，自动远离障碍物;而在距离目标节点较近的时候，使用 A* 算法，让寻路主体精确的接近目标。这是本算法的主要思想。
